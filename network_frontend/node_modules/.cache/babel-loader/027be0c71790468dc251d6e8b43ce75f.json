{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport Pagination from \"../../../../pagination/Pagination\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { getFollowerPosts, votePost, editPost } from \"../../../../../actions/posts\";\nimport \"./posts.css\";\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all';\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Posts() {\n  _s();\n\n  // Load posts by followers on page load\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, []); // Get all posts from users the user follows\n\n  const posts = useSelector(state => state.followingPosts.followingPosts); // Get user id from redux store\n\n  const user_id = useSelector(state => state.auth.user.id); // Get logged in username\n\n  const user = useSelector(state => state.auth.user); // Set up for pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // Get current post\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n  var type = \"\"; // Set posts in state and then update re-render page when user votes on post. \n\n  const vote = useSelector(state => state.posts.likedPost);\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, [vote]); // Set post ID\n\n  const [postId, setPostId] = useState(null); //Handle Edit \n\n  const [editText, setEditText] = useState(false);\n\n  const handleEdit = () => {\n    setEditText(true);\n  }; // React hook forms and handleSubmit \n\n\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  const history = useHistory();\n\n  const onSubmit = (data, post_id) => {\n    console.log(\"for data and post id: \", data, post_id);\n    dispatch(editPost(post_id, data.title, data.body));\n    history.go(\"/homepage\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [currentPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n            onClick: () => dispatch(votePost(user.id, post.id, type = \"upvote\")),\n            className: \"upvote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: post.votes !== 0 ? post.votes : \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n            onClick: () => dispatch(votePost(user.id, post.id, type = \"downvote\")),\n            className: \"downvote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-mainbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-author\",\n            children: [/*#__PURE__*/_jsxDEV(FcReddit, {\n              size: 22\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this), \"Posted by\\xA0 \", /*#__PURE__*/_jsxDEV(Link, {\n              to: `/user/${post.user}`,\n              children: [\"u/\", post.username, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 49\n            }, this), \" \\xA0on \", moment(post.date).format('MMMM Do YYYY, h:mm a')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this), editText ? postId == post.id ? /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form-group\",\n            onSubmit: handleSubmit(data => onSubmit(data, post.id)),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"title-input\",\n              type: \"text\",\n              name: \"title\",\n              defaultValue: post.title,\n              ...register(\"title\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"body-input\",\n              type: \"text\",\n              name: \"body\",\n              defaultValue: post.body,\n              ...register(\"body\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-button\",\n              value: \"POST\",\n              type: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"editable-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-body\",\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"editable-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-body\",\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-container\",\n              children: [/*#__PURE__*/_jsxDEV(GoComment, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comments\",\n                children: \" Comments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), user.id === post.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                handleEdit();\n                setPostId(post.id);\n              },\n              className: \"edit-container\",\n              children: [/*#__PURE__*/_jsxDEV(FiEdit2, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"edit\",\n                children: \" Edit Post\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Posts, \"b/Lq0Ki6zG1WWGQ6X8a9P3rrGNI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useForm, useHistory];\n});\n\n_c = Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","connect","Pagination","useForm","moment","Link","useHistory","getFollowerPosts","votePost","editPost","GoComment","FcReddit","FiEdit2","ArrowUpwardIcon","ArrowDownwardIcon","Posts","dispatch","user_id","posts","state","followingPosts","auth","user","id","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","vote","likedPost","postId","setPostId","editText","setEditText","handleEdit","register","handleSubmit","history","onSubmit","data","post_id","console","log","title","body","go","map","post","votes","username","date","format","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux'\nimport Pagination from \"../../../../pagination/Pagination\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment'\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { getFollowerPosts , votePost, editPost } from \"../../../../../actions/posts\";\n\n\nimport \"./posts.css\";\n\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all'\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nexport default function Posts() {\n\n    // Load posts by followers on page load\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n    }, [])\n\n    // Get all posts from users the user follows\n    const posts = useSelector((state) => state.followingPosts.followingPosts); \n\n    // Get user id from redux store\n    const user_id = useSelector((state) => state.auth.user.id);\n\n    // Get logged in username\n     const user = useSelector((state) => state.auth.user)\n\n    // Set up for pagination\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n    var type = \"\"\n\n     // Set posts in state and then update re-render page when user votes on post. \n     const vote = useSelector((state) => state.posts.likedPost)\n\n     useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n     }, [vote])\n\n    // Set post ID\n    const [postId, setPostId] = useState(null)\n\n    //Handle Edit \n    const [editText, setEditText] = useState(false)\n\n    const handleEdit = () => {\n        setEditText(true)\n    }\n\n    // React hook forms and handleSubmit \n\n    const { register, handleSubmit} = useForm();\n\n    const history = useHistory();\n\n    const onSubmit = (data, post_id) => {\n\n        console.log(\"for data and post id: \", data, post_id)\n    \n        dispatch(editPost(post_id, data.title, data.body))\n        history.go(\"/homepage\")\n    }\n\n\n    return (\n        <Fragment>\n                {currentPosts.map(post => (\n                    <div className=\"post-wrapper\"> \n                        <div className=\"post\">\n                            <div className=\"post-sidebar\">\n                                <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                            </div>\n                            <div className=\"post-mainbar\">\n                                <div className=\"post-author\">\n                                <FcReddit size={22}/> \n                                Posted by&nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp;on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                </div>\n                                {editText ? postId==post.id ?\n                                <form className=\"form-group\" onSubmit={handleSubmit(data => onSubmit(data, post.id))} >\n                                    \n                                    <input\n                                        className=\"title-input\"\n                                        type=\"text\" \n                                        name=\"title\"\n                                        defaultValue={post.title}\n                                        {...register(\"title\")} \n                                        \n                                    />\n                                    <textarea\n                                        className=\"body-input\"\n                                        type=\"text\"\n                                        name=\"body\"\n                                        defaultValue={post.body}\n                                        {...register(\"body\")} \n                                    />\n                                    <input\n                                        className=\"form-button\"\n                                        value=\"POST\"\n                                        type=\"submit\"\n                                    />\n                                </form>\n                                :\n                                <div className=\"editable-post\">\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                </div>\n                                :\n                                <div className=\"editable-post\">\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                </div>\n                                }   \n                                <div className=\"post-footer\">\n                                    <div className=\"comment-container\">\n                                        <GoComment size={18}/> \n                                        <div className=\"comments\"> Comments</div>\n                                    </div>\n                                    {user.id === post.user ? \n                                    <div onClick={() => {handleEdit(); setPostId(post.id);}} className=\"edit-container\">\n                                        <FiEdit2 size={18}/> \n                                        <div className=\"edit\"> Edit Post</div>\n                                    </div> : null\n                                    }\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                ))}\n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n            </Fragment>\n    )\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}