{"ast":null,"code":"import axios from \"axios\";\nimport { useSelector } from 'react-redux';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT_SUCCESS } from './types'; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loadin \n  dispatch({\n    type: USER_LOADING\n  }); // Get token from state\n\n  const token = getState().auth.token; // Headers \n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  } else {\n    console.log(\"Could not access auth token...\");\n  }\n\n  axios.get('http://127.0.0.1:8000/api/auth/user', config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(\"authentication error\");\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //LOGIN User\n\nexport const login = (username, password) => dispatch => {\n  // Headers \n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body \n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post('http://127.0.0.1:8000/api/auth/login', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(\"authentication error\");\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post('http://127.0.0.1:8000/api/auth/register', body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(\"registration error\");\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Logout User \n\nexport const logout = () => (dispatch, getState) => {\n  console.log(\"logout function called\"); // Get token from state\n\n  const token = getState().auth.token; // Headers \n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  axios.post('http://127.0.0.1:8000/api/auth/logout', null, config).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(\"logout error\");\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n}; // Setup config with token - helper function\n\nexport const tokenConfigHooks = token => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  console.log(\"config\", config);\n  return config;\n};","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/actions/auth.js"],"names":["axios","useSelector","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","token","auth","config","headers","console","log","get","then","res","payload","data","catch","err","login","username","password","body","JSON","stringify","post","register","email","logout","tokenConfig","tokenConfigHooks"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useSelector } from 'react-redux'\n\nimport {\n    USER_LOADED, \n    USER_LOADING, \n    AUTH_ERROR,\n    LOGIN_SUCCESS, \n    LOGIN_FAIL,\n    REGISTER_SUCCESS, \n    REGISTER_FAIL,\n    LOGOUT_SUCCESS\n} from './types'\n\n\n// Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n    // User loadin \n    dispatch ({ type: USER_LOADING })\n\n    // Get token from state\n    const token = getState().auth.token\n\n    // Headers \n    const config = {\n        headers : {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n\n    // If token, add to headers config\n    if(token) {\n        config.headers['Authorization'] = `Token ${token}`;\n    } else {\n        console.log(\"Could not access auth token...\")\n    }\n\n    axios.get('http://127.0.0.1:8000/api/auth/user', config)\n        .then(res => {\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data\n            });\n        }).catch(err => {\n            console.log(\"authentication error\")\n            dispatch({\n                type: AUTH_ERROR\n            })\n        })\n}\n\n//LOGIN User\n\nexport const login = (username, password) => (dispatch) => {\n\n    // Headers \n    const config = {\n        headers : {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n\n    // Request Body \n    const body = JSON.stringify({username, password})\n\n    axios\n        .post('http://127.0.0.1:8000/api/auth/login', body, config)\n        .then((res) => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            });\n        })\n        .catch((err) => {\n            console.log(\"authentication error\")\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        });\n    \n};\n\n// Register User\n\nexport const register = ({username, password, email}) => (dispatch) => {\n\n    //Headers\n    const config = {\n        headers : {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n\n    // Request Body\n    const body = JSON.stringify({username, email, password})\n\n    axios\n        .post('http://127.0.0.1:8000/api/auth/register', body, config)\n        .then((res) => {\n            dispatch({\n                type: REGISTER_SUCCESS, \n                payload: res.data\n            });\n        })\n        .catch((err) => {\n            console.log(\"registration error\")\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n};\n\n// Logout User \n\nexport const logout = () => (dispatch, getState) => {\n\n    console.log(\"logout function called\")\n\n    // Get token from state\n    const token = getState().auth.token;\n\n    // Headers \n    const config = {\n        headers : {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n\n    // If token, add to headers config\n    if (token) {\n        config.headers['Authorization'] = `Token ${token}`;\n    }\n\n    axios\n        .post('http://127.0.0.1:8000/api/auth/logout', null,  config)\n        .then(res => {\n            dispatch({\n                type: LOGOUT_SUCCESS,\n                payload: res.data\n            });\n        }).catch(err => {\n            console.log(\"logout error\")\n        })\n    \n}\n\n// Setup config with token - helper function\n\nexport const tokenConfig = (getState) => {\n\n    // Get token from state\n    const token = getState().auth.token;\n  \n    // Headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n  \n    // If token, add to headers config\n    if (token) {\n      config.headers['Authorization'] = `Token ${token}`;\n    }\n  \n    return config;\n  };\n\n// Setup config with token - helper function\n\nexport const tokenConfigHooks = (token) => {\n\n    // Headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n  \n    // If token, add to headers config\n    if (token) {\n      config.headers['Authorization'] = `Token ${token}`;\n    }\n\n    console.log(\"config\", config)\n  \n    return config;\n  };"]},"metadata":{},"sourceType":"module"}