{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnewton/Desktop/network_frontend/src/components/landing/content/main-bar/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment';\nimport Pagination from \"../../../../pagination/Pagination\";\nimport LoginModal from \"../../../../loginModal/LoginModal\";\nimport { getPosts, votePost, editPost } from '../../../../../actions/posts';\nimport \"./posts.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Posts() {\n  _s();\n\n  // Get Posts via getPosts function and redux dispathcer\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getPosts());\n  }, []); // Set posts in state\n\n  const posts = useSelector(state => state.posts.posts); // Handle with Pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // Get current post (for paggination)\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Handle State for Modal (checks if user clicked on login or logout)\n\n  const [signInState, setsignInState] = useState({\n    open: false,\n    signInType: \"\"\n  }); // setSignInState to closed if the user is authenticated\n\n  useEffect(() => {\n    setsignInState({\n      open: false\n    });\n  }, []);\n\n  const handleRegister = () => {\n    setsignInState({\n      open: true,\n      signInType: \"register\"\n    });\n  }; // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n\n  var type = \"\"; // Check if user is Authenticated\n\n  const Authenticated = useSelector(state => state.auth.isAuthenticated); // Get logged in user id\n\n  const user = useSelector(state => state.auth.user); // Set posts in state and then update re-render page when user votes on post. \n\n  const vote = useSelector(state => state.posts.likedPost);\n  useEffect(() => {\n    dispatch(getPosts());\n  }, [vote]); // Set post ID\n\n  const [postId, setPostId] = useState(null); //Handle Edit \n\n  const [editText, setEditText] = useState(false);\n\n  const handleEdit = () => {\n    setEditText(true);\n  }; // React hook forms and handleSubmit \n\n\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = (data, post_id) => {\n    console.log(\"for data: \", data);\n    console.log(\"post id is: \", post_id);\n    dispatch(editPost(post_id, data.title, data.body));\n  };\n\n  if (Authenticated) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [currentPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n              onClick: () => dispatch(votePost(user.id, post.id, type = \"upvote\")),\n              className: \"upvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: post.votes !== 0 ? post.votes : \"Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n              onClick: () => dispatch(votePost(user.id, post.id, type = \"downvote\")),\n              className: \"downvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-mainbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-author\",\n              children: [/*#__PURE__*/_jsxDEV(FcReddit, {\n                size: 22\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 37\n              }, this), \"Posted by\\xA0 \", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/user/${post.user}`,\n                children: [\"u/\", post.username, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 53\n              }, this), \" \\xA0on \", moment(post.date).format('MMMM Do YYYY, h:mm a')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this), editText ? postId == post.id ? /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"form-group\",\n              onSubmit: data => handleSubmit(onSubmit(data, post.id)),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"title-input\",\n                type: \"text\",\n                name: \"title\",\n                defaultValue: post.title,\n                ...register(\"title\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"body-input\",\n                type: \"text\",\n                name: \"body\",\n                defaultValue: post.body,\n                ...register(\"body\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-button\",\n                value: \"POST\",\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"editable-post\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-title\",\n                children: post.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-body\",\n                children: post.body\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"editable-post\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-title\",\n                children: post.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-body\",\n                children: post.body\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-footer\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-container\",\n                children: [/*#__PURE__*/_jsxDEV(GoComment, {\n                  size: 18\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comments\",\n                  children: \" Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 41\n              }, this), user.id === post.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => {\n                  handleEdit();\n                  setPostId(post.id);\n                },\n                className: \"edit-container\",\n                children: [/*#__PURE__*/_jsxDEV(FiEdit2, {\n                  size: 18\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"edit\",\n                  children: \" Edit Post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 41\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(LoginModal, {\n        open: signInState.open,\n        action: signInState.signInType,\n        onClose: () => setsignInState({\n          open: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        postsPerPage: postsPerPage,\n        totalPosts: posts.length,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [currentPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n              onClick: handleRegister,\n              className: \"upvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: post.votes !== 0 ? post.votes : \"Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n              onClick: handleRegister,\n              className: \"downvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-mainbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-author\",\n              children: [/*#__PURE__*/_jsxDEV(FcReddit, {\n                size: 22\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 37\n              }, this), \"Posted by\\xA0 \", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/user/${post.user}`,\n                children: [\"u/\", post.username, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 53\n              }, this), \" \\xA0on \", moment(post.date).format('MMMM Do YYYY, h:mm a')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-body\",\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-footer\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-container\",\n                onClick: handleRegister,\n                children: [/*#__PURE__*/_jsxDEV(GoComment, {\n                  size: 18\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comments\",\n                  children: \" Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(LoginModal, {\n        open: signInState.open,\n        action: signInState.signInType,\n        onClose: () => setsignInState({\n          open: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        postsPerPage: postsPerPage,\n        totalPosts: posts.length,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Posts, \"nEq4LitsBnAEsBp6JSHcp1exsPE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = Posts;\n\nfunction mapStateToProps(state) {\n  return {\n    state,\n    isAuthenticated: state.auth.isAuthenticated,\n    likedPost: state.posts.likedPost\n  };\n}\n\nexport default connect(mapStateToProps)(Posts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/components/landing/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","connect","Link","useForm","moment","Pagination","LoginModal","getPosts","votePost","editPost","ArrowUpwardIcon","ArrowDownwardIcon","GoComment","FcReddit","FiEdit2","Posts","dispatch","posts","state","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","signInState","setsignInState","open","signInType","handleRegister","type","Authenticated","auth","isAuthenticated","user","vote","likedPost","postId","setPostId","editText","setEditText","handleEdit","register","handleSubmit","onSubmit","data","post_id","console","log","title","body","map","post","id","votes","username","date","format","length","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux'\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment'\n\nimport Pagination from \"../../../../pagination/Pagination\";\nimport LoginModal from \"../../../../loginModal/LoginModal\";\n\n\nimport { getPosts, votePost, editPost } from '../../../../../actions/posts';\n\nimport \"./posts.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all'\n\nexport function Posts() {\n\n    // Get Posts via getPosts function and redux dispathcer\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getPosts())\n    }, [])\n\n    // Set posts in state\n    const posts = useSelector((state) => state.posts.posts)\n\n    // Handle with Pagination\n    const [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post (for paggination)\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n    // Handle State for Modal (checks if user clicked on login or logout)\n\tconst [signInState, setsignInState] = useState({\n\t\topen: false,\n\t\tsignInType: \"\",\n\t});\n\n\t// setSignInState to closed if the user is authenticated\n\tuseEffect(() => {\n\t\tsetsignInState({ open: false });\n\t}, []);\n\n\tconst handleRegister = () => {\n\t\tsetsignInState({\n\t\t\topen: true,\n\t\t\tsignInType: \"register\",\n\t\t});\n\t};\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n    var type = \"\"\n\n    // Check if user is Authenticated\n    const Authenticated = useSelector((state) => state.auth.isAuthenticated)\n\n    // Get logged in user id\n    const user = useSelector((state) => state.auth.user)\n\n    // Set posts in state and then update re-render page when user votes on post. \n    const vote = useSelector((state) => state.posts.likedPost)\n\n    useEffect(() => {\n        dispatch(getPosts())\n    }, [vote])\n\n    // Set post ID\n    const [postId, setPostId] = useState(null)\n\n    //Handle Edit \n    const [editText, setEditText] = useState(false)\n\n    const handleEdit = () => {\n        setEditText(true)\n    }\n\n    // React hook forms and handleSubmit \n\n    const { register, handleSubmit} = useForm();\n\n    const onSubmit = (data, post_id) => {\n\n        console.log(\"for data: \", data)\n        console.log(\"post id is: \", post_id)\n\n        dispatch(editPost(post_id, data.title, data.body))\n    }\n\n    if (Authenticated) {\n        return (\n            <Fragment>\n                    {currentPosts.map(post => (\n                        <div className=\"post-wrapper\"> \n                            <div className=\"post\">\n                                <div className=\"post-sidebar\">\n                                    <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                                </div>\n                                <div className=\"post-mainbar\">\n                                    <div className=\"post-author\">\n                                    <FcReddit size={22}/> \n                                    Posted by&nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp;on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                    </div>\n                                    {editText ? postId==post.id ?\n                                    <form className=\"form-group\" onSubmit={data => handleSubmit(onSubmit(data, post.id))} >\n                                        \n                                        <input\n                                            className=\"title-input\"\n                                            type=\"text\" \n                                            name=\"title\"\n                                            defaultValue={post.title}\n                                            {...register(\"title\")} \n                                            \n                                        />\n                                        <textarea\n                                            className=\"body-input\"\n                                            type=\"text\"\n                                            name=\"body\"\n                                            defaultValue={post.body}\n                                            {...register(\"body\")} \n                                        />\n                                        <input\n                                            className=\"form-button\"\n                                            value=\"POST\"\n                                            type=\"submit\"\n                                        />\n                                    </form>\n                                    :\n                                    <div className=\"editable-post\">\n                                        <div className=\"post-title\">\n                                            {post.title}\n                                        </div>\n                                        <div className=\"post-body\">\n                                            {post.body}\n                                        </div>\n                                    </div>\n                                    :\n                                    <div className=\"editable-post\">\n                                        <div className=\"post-title\">\n                                            {post.title}\n                                        </div>\n                                        <div className=\"post-body\">\n                                            {post.body}\n                                        </div>\n                                    </div>\n                                    }   \n                                    <div className=\"post-footer\">\n                                        <div className=\"comment-container\">\n                                            <GoComment size={18}/> \n                                            <div className=\"comments\"> Comments</div>\n                                        </div>\n                                        {user.id === post.user ? \n                                        <div onClick={() => {handleEdit(); setPostId(post.id);}} className=\"edit-container\">\n                                            <FiEdit2 size={18}/> \n                                            <div className=\"edit\"> Edit Post</div>\n                                        </div> : null\n                                        }\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    ))}\n                    <LoginModal\n                        open={signInState.open}\n                        action={signInState.signInType}\n                        onClose={() => setsignInState({ open: false })}\n                    ></LoginModal>\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n                </Fragment>\n        )\n    } else {\n        return (\n            <Fragment>\n                    {currentPosts.map(post => (\n                        <div className=\"post-wrapper\"> \n                            <div className=\"post\">\n                                <div className=\"post-sidebar\">\n                                    <ArrowUpwardIcon onClick={handleRegister} className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon  onClick={handleRegister} className=\"downvote\" />\n                                </div>\n                                <div className=\"post-mainbar\">\n                                    <div className=\"post-author\">\n                                    <FcReddit size={22}/> \n                                    Posted by&nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp;on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                    </div>\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                    <div className=\"post-footer\">\n                                        <div className=\"comment-container\" onClick={handleRegister}>\n                                            <GoComment size={18}/> \n                                            <div className=\"comments\"> Comments</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    ))}\n                    <LoginModal\n                        open={signInState.open}\n                        action={signInState.signInType}\n                        onClose={() => setsignInState({ open: false })}\n                    ></LoginModal>\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n                </Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tstate,\n\t\tisAuthenticated: state.auth.isAuthenticated,\n        likedPost: state.posts.likedPost\n\t};\n}\n\nexport default connect(mapStateToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}