{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport Pagination from \"../../../../pagination/Pagination\";\nimport { getFollowerPosts, votePost } from \"../../../../../actions/posts\";\nimport \"./posts.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Posts() {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  const posts = useSelector(state => state.followingPosts.followingPosts);\n  const user_id = useSelector(state => state.auth.user.id); // This currently just gets all posts. Later I will need to change this to just get posts the users followed.\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, []);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // Get current post\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Get logged in user id\n\n  const user = useSelector(state => state.auth.user); // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n  var type = \"\"; // Set posts in state and then update re-render page when user votes on post. \n\n  const vote = useSelector(state => state.posts.likedPost);\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, [vote]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [currentPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n            onClick: () => dispatch(votePost(user.id, post.id, type = \"upvote\")),\n            className: \"upvote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: post.votes !== 0 ? post.votes : \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n            onClick: () => dispatch(votePost(user.id, post.id, type = \"downvote\")),\n            className: \"downvote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-mainbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-author\",\n            children: [\"Posted by user: \", post.user]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-title\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-body\",\n            children: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-footer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comments\",\n              children: \" Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Posts, \"VuH94F78GA15q0rMWRCZIC/MWh4=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useSelector, useSelector];\n});\n\n_c = Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","connect","Pagination","getFollowerPosts","votePost","ArrowUpwardIcon","ArrowDownwardIcon","Posts","currentPage","setCurrentPage","postsPerPage","posts","state","followingPosts","user_id","auth","user","id","dispatch","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","vote","likedPost","map","post","votes","title","body","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux'\nimport Pagination from \"../../../../pagination/Pagination\";\n\nimport { getFollowerPosts , votePost } from \"../../../../../actions/posts\";\n\n\nimport \"./posts.css\";\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nexport default function Posts() {\n\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const posts = useSelector((state) => state.followingPosts.followingPosts); \n\n    const user_id = useSelector((state) => state.auth.user.id); \n\n    // This currently just gets all posts. Later I will need to change this to just get posts the users followed.\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n    }, [])\n\t\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n    // Get logged in user id\n\n    const user = useSelector((state) => state.auth.user)\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n    var type = \"\"\n\n     // Set posts in state and then update re-render page when user votes on post. \n     const vote = useSelector((state) => state.posts.likedPost)\n\n     useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n     }, [vote])\n\n    return (\n        <Fragment>\n                {currentPosts.map(post => (\n                    <div className=\"post-wrapper\"> \n                        <div className=\"post\">\n                            <div className=\"post-sidebar\">\n                            <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                            </div>\n                            <div className=\"post-mainbar\">\n                                <div className=\"post-author\">\n                                        Posted by user: {post.user}\n                                </div>\n                                <div className=\"post-title\">\n                                    {post.title}\n                                </div>\n                                <div className=\"post-body\">\n                                    {post.body}\n                                </div>\n                                <div className=\"post-footer\">\n                                    <div className=\"comments\"> Comments</div>\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                ))}\n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n            </Fragment>\n    )\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}