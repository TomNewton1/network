{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport Pagination from \"../../../../pagination/Pagination\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { getFollowerPosts, votePost, editPost } from \"../../../../../actions/posts\";\nimport \"./posts.css\";\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all';\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Posts() {\n  _s();\n\n  // Load posts by followers on page load\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, []); // Get all posts from users the user follows\n\n  const posts = useSelector(state => state.followingPosts.followingPosts); // Get user id from redux store\n\n  const user_id = useSelector(state => state.auth.user.id); // Get logged in username\n\n  const user = useSelector(state => state.auth.user); // Set up for pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // Get current post\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n  var type = \"\"; // Set posts in state and then update re-render page when user votes on post. \n\n  const vote = useSelector(state => state.posts.likedPost);\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, [vote]); // Set post ID\n\n  const [postId, setPostId] = useState(null); //Handle Edit \n\n  const [editText, setEditText] = useState(false);\n\n  const handleEdit = () => {\n    setEditText(true);\n  }; // React hook forms and handleSubmit \n\n\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  const history = useHistory();\n\n  const onSubmit = (data, post_id) => {\n    console.log(\"for data and post id: \", data, post_id);\n    dispatch(editPost(post_id, data.title, data.body));\n    history.go(\"/homepage\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Posts, \"b/Lq0Ki6zG1WWGQ6X8a9P3rrGNI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useForm, useHistory];\n});\n\n_c = Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","connect","Pagination","useForm","moment","Link","useHistory","getFollowerPosts","votePost","editPost","GoComment","FcReddit","FiEdit2","ArrowUpwardIcon","ArrowDownwardIcon","Posts","dispatch","user_id","posts","state","followingPosts","auth","user","id","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","vote","likedPost","postId","setPostId","editText","setEditText","handleEdit","register","handleSubmit","history","onSubmit","data","post_id","console","log","title","body","go","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux'\nimport Pagination from \"../../../../pagination/Pagination\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment'\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { getFollowerPosts , votePost, editPost } from \"../../../../../actions/posts\";\n\n\nimport \"./posts.css\";\n\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all'\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nexport default function Posts() {\n\n    // Load posts by followers on page load\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n    }, [])\n\n    // Get all posts from users the user follows\n    const posts = useSelector((state) => state.followingPosts.followingPosts); \n\n    // Get user id from redux store\n    const user_id = useSelector((state) => state.auth.user.id);\n\n    // Get logged in username\n     const user = useSelector((state) => state.auth.user)\n\n    // Set up for pagination\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n    var type = \"\"\n\n     // Set posts in state and then update re-render page when user votes on post. \n     const vote = useSelector((state) => state.posts.likedPost)\n\n     useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n     }, [vote])\n\n    // Set post ID\n    const [postId, setPostId] = useState(null)\n\n    //Handle Edit \n    const [editText, setEditText] = useState(false)\n\n    const handleEdit = () => {\n        setEditText(true)\n    }\n\n    // React hook forms and handleSubmit \n\n    const { register, handleSubmit} = useForm();\n\n    const history = useHistory();\n\n    const onSubmit = (data, post_id) => {\n\n        console.log(\"for data and post id: \", data, post_id)\n    \n        dispatch(editPost(post_id, data.title, data.body))\n        history.go(\"/homepage\")\n    }\n\n\n    return (\n        <Fragment>\n                \n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n            </Fragment>\n    )\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}