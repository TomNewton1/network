{"ast":null,"code":"import _slicedToArray from\"/Users/thomasnewton/Desktop/project4/network_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,Fragment}from\"react\";import{useSelector,useDispatch}from'react-redux';import Pagination from\"../../../../pagination/Pagination\";import moment from'moment';import{Link}from\"react-router-dom\";import{getFollowerPosts,votePost}from\"../../../../../actions/posts\";import\"./posts.css\";import{GoComment,FcReddit,FiEdit2}from'react-icons/all';import ArrowUpwardIcon from\"@material-ui/icons/ArrowUpward\";import ArrowDownwardIcon from\"@material-ui/icons/ArrowDownward\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Posts(){// Load posts by followers on page load\nvar dispatch=useDispatch();useEffect(function(){dispatch(getFollowerPosts(user_id));},[]);// Get all posts from users the user follows\nvar posts=useSelector(function(state){return state.followingPosts.followingPosts;});// Get user id from redux store\nvar user_id=useSelector(function(state){return state.auth.user.id;});// Get logged in username\nvar user=useSelector(function(state){return state.auth.user;});// Set up for pagination\nvar _useState=useState(1),_useState2=_slicedToArray(_useState,2),currentPage=_useState2[0],setCurrentPage=_useState2[1];var _useState3=useState(10),_useState4=_slicedToArray(_useState3,1),postsPerPage=_useState4[0];var paginate=function paginate(pageNumber){return setCurrentPage(pageNumber);};// Get current post\nvar indexOfLastPost=currentPage*postsPerPage;var indexOfFirstPost=indexOfLastPost-postsPerPage;var currentPosts=posts.slice(indexOfFirstPost,indexOfLastPost);// Assign vote type (assigns string to variable based on upvote or downvote click)\nvar type=\"\";// Set posts in state and then update re-render page when user votes on post. \nvar vote=useSelector(function(state){return state.posts.likedPost;});useEffect(function(){dispatch(getFollowerPosts(user_id));},[vote]);// Get searchTerm for redux store\nvar searchTerm=useSelector(function(state){return state.filterPosts.searchTerm;});return/*#__PURE__*/_jsxs(Fragment,{children:[currentPosts.filter(function(post){if(searchTerm==\"\"){return post;}else if(post.body.toLowerCase().includes(searchTerm.toLowerCase())){return post;}else if(post.title.toLowerCase().includes(searchTerm.toLowerCase())){return post;}}).map(function(post){return/*#__PURE__*/_jsx(\"div\",{className:\"post-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"post\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post-sidebar\",children:[/*#__PURE__*/_jsx(ArrowUpwardIcon,{onClick:function onClick(){return dispatch(votePost(user.id,post.id,type=\"upvote\"));},className:\"upvote\"}),/*#__PURE__*/_jsx(\"div\",{children:post.votes!==0?post.votes:\"Vote\"}),/*#__PURE__*/_jsx(ArrowDownwardIcon,{onClick:function onClick(){return dispatch(votePost(user.id,post.id,type=\"downvote\"));},className:\"downvote\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"post-mainbar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post-author\",children:[/*#__PURE__*/_jsx(FcReddit,{size:22}),\"Posted by \\xA0 \",/*#__PURE__*/_jsxs(Link,{to:\"/user/\".concat(post.user),children:[\"u/\",post.username,\" \"]}),\" \\xA0 on \",moment(post.date).format('MMMM Do YYYY, h:mm a')]}),/*#__PURE__*/_jsx(\"div\",{className:\"post-title\",children:post.title}),/*#__PURE__*/_jsx(\"div\",{className:\"post-body\",children:post.body}),/*#__PURE__*/_jsxs(\"div\",{className:\"post-footer\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"comment-container\",children:[/*#__PURE__*/_jsx(GoComment,{size:18}),/*#__PURE__*/_jsx(\"div\",{className:\"comments\",children:\" Comments\"})]}),user.id===post.user?/*#__PURE__*/_jsxs(\"div\",{className:\"edit-container\",children:[/*#__PURE__*/_jsx(FiEdit2,{size:18}),/*#__PURE__*/_jsx(\"div\",{className:\"edit\",children:\" Edit Post\"})]}):null]})]})]})});}),/*#__PURE__*/_jsx(Pagination,{postsPerPage:postsPerPage,totalPosts:posts.length,paginate:paginate})]});}","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/project4/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","Pagination","moment","Link","getFollowerPosts","votePost","GoComment","FcReddit","FiEdit2","ArrowUpwardIcon","ArrowDownwardIcon","Posts","dispatch","user_id","posts","state","followingPosts","auth","user","id","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","vote","likedPost","searchTerm","filterPosts","filter","post","body","toLowerCase","includes","title","map","votes","username","date","format","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport Pagination from \"../../../../pagination/Pagination\";\nimport moment from 'moment'\nimport { Link } from \"react-router-dom\";\n\nimport { getFollowerPosts , votePost } from \"../../../../../actions/posts\";\n\n\nimport \"./posts.css\";\n\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all'\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nexport default function Posts() {\n\n    // Load posts by followers on page load\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n    }, [])\n\n    // Get all posts from users the user follows\n    const posts = useSelector((state) => state.followingPosts.followingPosts); \n\n    // Get user id from redux store\n    const user_id = useSelector((state) => state.auth.user.id);\n\n    // Get logged in username\n     const user = useSelector((state) => state.auth.user)\n\n    // Set up for pagination\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n    var type = \"\";\n\n    // Set posts in state and then update re-render page when user votes on post. \n    const vote = useSelector((state) => state.posts.likedPost)\n\n    useEffect(() => {\n    dispatch(getFollowerPosts(user_id))\n    }, [vote])\n\n    // Get searchTerm for redux store\n    const searchTerm = useSelector((state) => state.filterPosts.searchTerm)\n\n    return (\n        <Fragment>\n                {currentPosts.filter((post) => {\n                    if (searchTerm == \"\") {\n                        return post\n                    } else if ( post.body.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return post\n                    } else if (post.title.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return post\n                    }\n                }).map(post => (\n                    <div className=\"post-wrapper\"> \n                        <div className=\"post\">\n                            <div className=\"post-sidebar\">\n                            <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                            </div>\n                            <div className=\"post-mainbar\">\n                                <div className=\"post-author\">\n                                <FcReddit size={22}/> \n                                Posted by &nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp; on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                </div>\n                                <div className=\"post-title\">\n                                    {post.title}\n                                </div>\n                                <div className=\"post-body\">\n                                    {post.body}\n                                </div>\n                                <div className=\"post-footer\">\n                                    <div className=\"comment-container\">\n                                        <GoComment size={18}/> \n                                        <div className=\"comments\"> Comments</div>\n                                    </div>\n                                    {user.id === post.user ? \n                                    <div className=\"edit-container\">\n                                        <FiEdit2 size={18}/> \n                                        <div className=\"edit\"> Edit Post</div>\n                                    </div> : null\n                                    }\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                ))}\n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n            </Fragment>\n    )\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}