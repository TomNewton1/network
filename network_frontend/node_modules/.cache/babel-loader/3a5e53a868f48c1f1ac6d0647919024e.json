{"ast":null,"code":"import _objectSpread from\"/Users/thomasnewton/Desktop/project4/network_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/thomasnewton/Desktop/project4/network_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,Fragment}from\"react\";import{useSelector,useDispatch,connect}from'react-redux';import{Link}from\"react-router-dom\";import{useForm}from\"react-hook-form\";import moment from'moment';import Pagination from\"../../../../pagination/Pagination\";import LoginModal from\"../../../../loginModal/LoginModal\";import{getPosts,votePost,editPost}from'../../../../../actions/posts';import\"./posts.css\";import ArrowUpwardIcon from\"@material-ui/icons/ArrowUpward\";import ArrowDownwardIcon from\"@material-ui/icons/ArrowDownward\";import{GoComment,FcReddit,FiEdit2}from'react-icons/all';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Posts(){// Get Posts via getPosts function and redux dispathcer\nvar dispatch=useDispatch();useEffect(function(){dispatch(getPosts());},[]);// Set posts in state\nvar posts=useSelector(function(state){return state.posts.posts;});// Handle with Pagination\nvar _useState=useState(1),_useState2=_slicedToArray(_useState,2),currentPage=_useState2[0],setCurrentPage=_useState2[1];var _useState3=useState(10),_useState4=_slicedToArray(_useState3,1),postsPerPage=_useState4[0];var paginate=function paginate(pageNumber){return setCurrentPage(pageNumber);};// Get current post (for paggination)\nvar indexOfLastPost=currentPage*postsPerPage;var indexOfFirstPost=indexOfLastPost-postsPerPage;var currentPosts=posts.slice(indexOfFirstPost,indexOfLastPost);// Handle State for Modal (checks if user clicked on login or logout)\nvar _useState5=useState({open:false,signInType:\"\"}),_useState6=_slicedToArray(_useState5,2),signInState=_useState6[0],setsignInState=_useState6[1];// setSignInState to closed if the user is authenticated\nuseEffect(function(){setsignInState({open:false});},[]);var handleRegister=function handleRegister(){setsignInState({open:true,signInType:\"register\"});};// Assign vote type (assigns string to variable based on upvote or downvote click)\nvar type=\"\";// Check if user is Authenticated\nvar Authenticated=useSelector(function(state){return state.auth.isAuthenticated;});// Get logged in user id\nvar user=useSelector(function(state){return state.auth.user;});// Set posts in state and then update re-render page when user votes on post. \nvar vote=useSelector(function(state){return state.posts.likedPost;});useEffect(function(){dispatch(getPosts());},[vote]);// Set post ID\nvar _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),postId=_useState8[0],setPostId=_useState8[1];//Handle Edit \nvar _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),editText=_useState10[0],setEditText=_useState10[1];var handleEdit=function handleEdit(){setEditText(true);};// React hook forms and handleSubmit \nvar _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit;var onSubmit=function onSubmit(data,post_id){dispatch(editPost(post_id,data.title,data.body));setEditText(false);};// Set edit in state and then update re-render page when user edits a post.\nvar edited=useSelector(function(state){return state.posts.editedPost;});useEffect(function(){dispatch(getPosts());},[edited]);// Get searchTerm for redux store\nvar searchTerm=useSelector(function(state){return state.filterPosts.searchTerm;});if(Authenticated){return/*#__PURE__*/_jsxs(Fragment,{children:[currentPosts.filter(function(post){if(searchTerm==\"\"){return post;}else if(post.body.toLowerCase().includes(searchTerm.toLowerCase())){return post;}else if(post.title.toLowerCase().includes(searchTerm.toLowerCase())){return post;}}).map(function(post){return/*#__PURE__*/_jsx(\"div\",{className:\"post-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"post\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post-sidebar\",children:[/*#__PURE__*/_jsx(ArrowUpwardIcon,{onClick:function onClick(){return dispatch(votePost(user.id,post.id,type=\"upvote\"));},className:\"upvote\"}),/*#__PURE__*/_jsx(\"div\",{children:post.votes!==0?post.votes:\"Vote\"}),/*#__PURE__*/_jsx(ArrowDownwardIcon,{onClick:function onClick(){return dispatch(votePost(user.id,post.id,type=\"downvote\"));},className:\"downvote\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"post-mainbar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post-author\",children:[/*#__PURE__*/_jsx(FcReddit,{size:22}),\"Posted by\\xA0 \",/*#__PURE__*/_jsxs(Link,{to:\"/user/\".concat(post.user),children:[\"u/\",post.username,\" \"]}),\" \\xA0on \",moment(post.date).format('MMMM Do YYYY, h:mm a')]}),editText?postId===post.id?/*#__PURE__*/_jsxs(\"form\",{className:\"form-group\",onSubmit:handleSubmit(function(data){return onSubmit(data,post.id);}),children:[/*#__PURE__*/_jsx(\"input\",_objectSpread({className:\"title-input\",type:\"text\",name:\"title\",defaultValue:post.title},register(\"title\"))),/*#__PURE__*/_jsx(\"textarea\",_objectSpread({className:\"body-input\",type:\"text\",name:\"body\",defaultValue:post.body},register(\"body\"))),/*#__PURE__*/_jsx(\"input\",{className:\"form-button\",value:\"POST\",type:\"submit\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"editable-post\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"post-title\",children:post.title}),/*#__PURE__*/_jsx(\"div\",{className:\"post-body\",children:post.body})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"editable-post\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"post-title\",children:post.title}),/*#__PURE__*/_jsx(\"div\",{className:\"post-body\",children:post.body})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"post-footer\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"comment-container\",children:[/*#__PURE__*/_jsx(GoComment,{size:18}),/*#__PURE__*/_jsx(\"div\",{className:\"comments\",children:\" Comments\"})]}),user.id===post.user?/*#__PURE__*/_jsxs(\"div\",{onClick:function onClick(){handleEdit();setPostId(post.id);},className:\"edit-container\",children:[/*#__PURE__*/_jsx(FiEdit2,{size:18}),/*#__PURE__*/_jsx(\"div\",{className:\"edit\",children:\" Edit Post\"})]}):null]})]})]})});}),/*#__PURE__*/_jsx(LoginModal,{open:signInState.open,action:signInState.signInType,onClose:function onClose(){return setsignInState({open:false});}}),/*#__PURE__*/_jsx(Pagination,{postsPerPage:postsPerPage,totalPosts:posts.length,paginate:paginate})]});}else{return/*#__PURE__*/_jsxs(Fragment,{children:[currentPosts.map(function(post){return/*#__PURE__*/_jsx(\"div\",{className:\"post-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"post\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post-sidebar\",children:[/*#__PURE__*/_jsx(ArrowUpwardIcon,{onClick:handleRegister,className:\"upvote\"}),/*#__PURE__*/_jsx(\"div\",{children:post.votes!==0?post.votes:\"Vote\"}),/*#__PURE__*/_jsx(ArrowDownwardIcon,{onClick:handleRegister,className:\"downvote\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"post-mainbar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post-author\",children:[/*#__PURE__*/_jsx(FcReddit,{size:22}),\"Posted by\\xA0 \",/*#__PURE__*/_jsxs(Link,{to:\"/user/\".concat(post.user),children:[\"u/\",post.username,\" \"]}),\" \\xA0on \",moment(post.date).format('MMMM Do YYYY, h:mm a')]}),/*#__PURE__*/_jsx(\"div\",{className:\"post-title\",children:post.title}),/*#__PURE__*/_jsx(\"div\",{className:\"post-body\",children:post.body}),/*#__PURE__*/_jsx(\"div\",{className:\"post-footer\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"comment-container\",onClick:handleRegister,children:[/*#__PURE__*/_jsx(GoComment,{size:18}),/*#__PURE__*/_jsx(\"div\",{className:\"comments\",children:\" Comments\"})]})})]})]})});}),/*#__PURE__*/_jsx(LoginModal,{open:signInState.open,action:signInState.signInType,onClose:function onClose(){return setsignInState({open:false});}}),/*#__PURE__*/_jsx(Pagination,{postsPerPage:postsPerPage,totalPosts:posts.length,paginate:paginate})]});}}function mapStateToProps(state){return{state:state,isAuthenticated:state.auth.isAuthenticated,likedPost:state.posts.likedPost};}export default connect(mapStateToProps)(Posts);","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/project4/network_frontend/src/components/landing/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","connect","Link","useForm","moment","Pagination","LoginModal","getPosts","votePost","editPost","ArrowUpwardIcon","ArrowDownwardIcon","GoComment","FcReddit","FiEdit2","Posts","dispatch","posts","state","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","open","signInType","signInState","setsignInState","handleRegister","type","Authenticated","auth","isAuthenticated","user","vote","likedPost","postId","setPostId","editText","setEditText","handleEdit","register","handleSubmit","onSubmit","data","post_id","title","body","edited","editedPost","searchTerm","filterPosts","filter","post","toLowerCase","includes","map","id","votes","username","date","format","length","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux'\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport moment from 'moment'\n\nimport Pagination from \"../../../../pagination/Pagination\";\nimport LoginModal from \"../../../../loginModal/LoginModal\";\n\n\nimport { getPosts, votePost, editPost } from '../../../../../actions/posts';\n\nimport \"./posts.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all'\n\nexport function Posts() {\n\n    // Get Posts via getPosts function and redux dispathcer\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getPosts())\n    }, [])\n\n    // Set posts in state\n    const posts = useSelector((state) => state.posts.posts)\n\n    // Handle with Pagination\n    const [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post (for paggination)\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n    // Handle State for Modal (checks if user clicked on login or logout)\n\tconst [signInState, setsignInState] = useState({\n\t\topen: false,\n\t\tsignInType: \"\",\n\t});\n\n\t// setSignInState to closed if the user is authenticated\n\tuseEffect(() => {\n\t\tsetsignInState({ open: false });\n\t}, []);\n\n\tconst handleRegister = () => {\n\t\tsetsignInState({\n\t\t\topen: true,\n\t\t\tsignInType: \"register\",\n\t\t});\n\t};\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n    var type = \"\"\n\n    // Check if user is Authenticated\n    const Authenticated = useSelector((state) => state.auth.isAuthenticated)\n\n    // Get logged in user id\n    const user = useSelector((state) => state.auth.user)\n\n    // Set posts in state and then update re-render page when user votes on post. \n    const vote = useSelector((state) => state.posts.likedPost)\n\n    useEffect(() => {\n        dispatch(getPosts())\n    }, [vote])\n\n    // Set post ID\n    const [postId, setPostId] = useState(null)\n\n    //Handle Edit \n    const [editText, setEditText] = useState(false)\n\n    const handleEdit = () => {\n        setEditText(true)\n    }\n\n    // React hook forms and handleSubmit \n\n    const { register, handleSubmit} = useForm();\n\n    const onSubmit = (data, post_id) => {\n        dispatch(editPost(post_id, data.title, data.body))\n        setEditText(false)\n    }\n\n    // Set edit in state and then update re-render page when user edits a post.\n    const edited = useSelector((state) => state.posts.editedPost)\n\n    useEffect(() => {\n        dispatch(getPosts())\n    }, [edited])\n\n    // Get searchTerm for redux store\n    const searchTerm = useSelector((state) => state.filterPosts.searchTerm)\n\n\n    if (Authenticated) {\n        return (\n            <Fragment>\n                {currentPosts.filter((post) => {\n                    if (searchTerm == \"\") {\n                        return post\n                    } else if ( post.body.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return post\n                    } else if (post.title.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return post\n                    }\n                }).map(post => (\n                    <div className=\"post-wrapper\"> \n                        <div className=\"post\">\n                            <div className=\"post-sidebar\">\n                                <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                            </div>\n                            <div className=\"post-mainbar\">\n                                <div className=\"post-author\">\n                                <FcReddit size={22}/> \n                                Posted by&nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp;on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                </div>\n                                {editText ? postId===post.id ?\n                                <form className=\"form-group\" onSubmit={handleSubmit(data => onSubmit(data, post.id))} >\n                                    \n                                    <input\n                                        className=\"title-input\"\n                                        type=\"text\" \n                                        name=\"title\"\n                                        defaultValue={post.title}\n                                        {...register(\"title\")} \n                                        \n                                    />\n                                    <textarea\n                                        className=\"body-input\"\n                                        type=\"text\"\n                                        name=\"body\"\n                                        defaultValue={post.body}\n                                        {...register(\"body\")} \n                                    />\n                                    <input\n                                        className=\"form-button\"\n                                        value=\"POST\"\n                                        type=\"submit\"\n                                    />\n                                </form>\n                                :\n                                <div className=\"editable-post\">\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                </div>\n                                :\n                                <div className=\"editable-post\">\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                </div>\n                                }   \n                                <div className=\"post-footer\">\n                                    <div className=\"comment-container\">\n                                        <GoComment size={18}/> \n                                        <div className=\"comments\"> Comments</div>\n                                    </div>\n                                    {user.id === post.user ? \n                                    <div onClick={() => {handleEdit(); setPostId(post.id);}} className=\"edit-container\">\n                                        <FiEdit2 size={18}/> \n                                        <div className=\"edit\"> Edit Post</div>\n                                    </div> : null\n                                    }\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                ))}\n                <LoginModal\n                    open={signInState.open}\n                    action={signInState.signInType}\n                    onClose={() => setsignInState({ open: false })}\n                ></LoginModal>\n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n            </Fragment>\n        )\n    } else {\n        return (\n            <Fragment>\n                    {currentPosts.map(post => (\n                        <div className=\"post-wrapper\"> \n                            <div className=\"post\">\n                                <div className=\"post-sidebar\">\n                                    <ArrowUpwardIcon onClick={handleRegister} className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon  onClick={handleRegister} className=\"downvote\" />\n                                </div>\n                                <div className=\"post-mainbar\">\n                                    <div className=\"post-author\">\n                                    <FcReddit size={22}/> \n                                    Posted by&nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp;on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                    </div>\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                    <div className=\"post-footer\">\n                                        <div className=\"comment-container\" onClick={handleRegister}>\n                                            <GoComment size={18}/> \n                                            <div className=\"comments\"> Comments</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    ))}\n                    <LoginModal\n                        open={signInState.open}\n                        action={signInState.signInType}\n                        onClose={() => setsignInState({ open: false })}\n                    ></LoginModal>\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n                </Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tstate,\n\t\tisAuthenticated: state.auth.isAuthenticated,\n        likedPost: state.posts.likedPost\n\t};\n}\n\nexport default connect(mapStateToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}