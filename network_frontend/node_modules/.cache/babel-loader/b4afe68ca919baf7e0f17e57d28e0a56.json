{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport Pagination from \"../../../../pagination/Pagination\";\nimport moment from 'moment';\nimport { Link } from \"react-router-dom\";\nimport { getFollowerPosts, votePost } from \"../../../../../actions/posts\";\nimport \"./posts.css\";\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all';\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Posts() {\n  _s();\n\n  // Load posts by followers on page load\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, []); // Get all posts from users the user follows\n\n  const posts = useSelector(state => state.followingPosts.followingPosts); // Get user id from redux store\n\n  const user_id = useSelector(state => state.auth.user.id); // Get logged in username\n\n  const user = useSelector(state => state.auth.user); // Set up for pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // Get current post\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n  var type = \"\"; // Set posts in state and then update re-render page when user votes on post. \n\n  const vote = useSelector(state => state.posts.likedPost);\n  useEffect(() => {\n    dispatch(getFollowerPosts(user_id));\n  }, [vote]); // Get searchTerm for redux store\n\n  const searchTerm = useSelector(state => state.filterPosts.searchTerm);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [currentPosts.filter(post => {\n      if (searchTerm == \"\") {\n        return post;\n      } else if (post.body.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return post;\n      } else if (post.title.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return post;\n      }\n    }).map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n            onClick: () => dispatch(votePost(user.id, post.id, type = \"upvote\")),\n            className: \"upvote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: post.votes !== 0 ? post.votes : \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n            onClick: () => dispatch(votePost(user.id, post.id, type = \"downvote\")),\n            className: \"downvote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-mainbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-author\",\n            children: [/*#__PURE__*/_jsxDEV(FcReddit, {\n              size: 22\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), \"Posted by \\xA0 \", /*#__PURE__*/_jsxDEV(Link, {\n              to: `/user/${post.user}`,\n              children: [\"u/\", post.username, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 50\n            }, this), \" \\xA0 on \", moment(post.date).format('MMMM Do YYYY, h:mm a')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-title\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-body\",\n            children: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-container\",\n              children: [/*#__PURE__*/_jsxDEV(GoComment, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comments\",\n                children: \" Comments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this), user.id === post.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"edit-container\",\n              children: [/*#__PURE__*/_jsxDEV(FiEdit2, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"edit\",\n                children: \" Edit Post\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Posts, \"7qZYEb3Jzjc5C9+L9VtHbcsXbrA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/components/homepage/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","Pagination","moment","Link","getFollowerPosts","votePost","GoComment","FcReddit","FiEdit2","ArrowUpwardIcon","ArrowDownwardIcon","Posts","dispatch","user_id","posts","state","followingPosts","auth","user","id","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","vote","likedPost","searchTerm","filterPosts","filter","post","body","toLowerCase","includes","title","map","votes","username","date","format","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport Pagination from \"../../../../pagination/Pagination\";\nimport moment from 'moment'\nimport { Link } from \"react-router-dom\";\n\nimport { getFollowerPosts , votePost } from \"../../../../../actions/posts\";\n\n\nimport \"./posts.css\";\n\nimport { GoComment, FcReddit, FiEdit2 } from 'react-icons/all'\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nexport default function Posts() {\n\n    // Load posts by followers on page load\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getFollowerPosts(user_id))\n    }, [])\n\n    // Get all posts from users the user follows\n    const posts = useSelector((state) => state.followingPosts.followingPosts); \n\n    // Get user id from redux store\n    const user_id = useSelector((state) => state.auth.user.id);\n\n    // Get logged in username\n     const user = useSelector((state) => state.auth.user)\n\n    // Set up for pagination\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n    var type = \"\";\n\n    // Set posts in state and then update re-render page when user votes on post. \n    const vote = useSelector((state) => state.posts.likedPost)\n\n    useEffect(() => {\n    dispatch(getFollowerPosts(user_id))\n    }, [vote])\n\n    // Get searchTerm for redux store\n    const searchTerm = useSelector((state) => state.filterPosts.searchTerm)\n\n    return (\n        <Fragment>\n                {currentPosts.filter((post) => {\n                    if (searchTerm == \"\") {\n                        return post\n                    } else if ( post.body.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return post\n                    } else if (post.title.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return post\n                    }\n                }).map(post => (\n                    <div className=\"post-wrapper\"> \n                        <div className=\"post\">\n                            <div className=\"post-sidebar\">\n                            <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                            </div>\n                            <div className=\"post-mainbar\">\n                                <div className=\"post-author\">\n                                <FcReddit size={22}/> \n                                Posted by &nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp; on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                </div>\n                                <div className=\"post-title\">\n                                    {post.title}\n                                </div>\n                                <div className=\"post-body\">\n                                    {post.body}\n                                </div>\n                                <div className=\"post-footer\">\n                                    <div className=\"comment-container\">\n                                        <GoComment size={18}/> \n                                        <div className=\"comments\"> Comments</div>\n                                    </div>\n                                    {user.id === post.user ? \n                                    <div className=\"edit-container\">\n                                        <FiEdit2 size={18}/> \n                                        <div className=\"edit\"> Edit Post</div>\n                                    </div> : null\n                                    }\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                ))}\n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n            </Fragment>\n    )\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}