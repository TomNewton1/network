{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnewton/Desktop/network_frontend/src/components/profile/content/main-bar/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport { Link, useParams } from \"react-router-dom\";\nimport moment from 'moment';\nimport Pagination from \"../../../../pagination/Pagination\";\nimport LoginModal from \"../../../../loginModal/LoginModal\";\nimport { getUserPosts, votePost } from '../../../../../actions/posts';\nimport \"./posts.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { GoComment, FcReddit } from 'react-icons/all';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Posts() {\n  _s();\n\n  //Parameters from URL (get user id)\n  const {\n    id\n  } = useParams(); // Get Posts via getPosts function and redux dispathcer\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getUserPosts(id));\n  }, []); // Set posts in state\n\n  const posts = useSelector(state => state.posts.posts); // Handle with Pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // Get current post (for paggination)\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Handle Modal\n  // Handle State for Modal (checks if user clicked on login or logout)\n\n  const [signInState, setsignInState] = useState({\n    open: false,\n    signInType: \"\"\n  }); // setSignInState to closed if the user is authenticated\n\n  useEffect(() => {\n    setsignInState({\n      open: false\n    });\n  }, []);\n\n  const handleRegister = () => {\n    setsignInState({\n      open: true,\n      signInType: \"register\"\n    });\n  }; // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n\n  var type = \"\"; // Check if user is Authenticated\n\n  const Authenticated = useSelector(state => state.auth.isAuthenticated); // Get logged in user id\n\n  const user = useSelector(state => state.auth.user); // Set posts in state and then update re-render page when user votes on post. \n\n  const vote = useSelector(state => state.posts.likedPost);\n  useEffect(() => {\n    dispatch(getUserPosts());\n  }, [vote]);\n\n  if (Authenticated) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"This is a specific users posts. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), currentPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n              onClick: () => dispatch(votePost(user.id, post.id, type = \"upvote\")),\n              className: \"upvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: post.votes !== 0 ? post.votes : \"Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n              onClick: () => dispatch(votePost(user.id, post.id, type = \"downvote\")),\n              className: \"downvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-mainbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-author\",\n              children: [/*#__PURE__*/_jsxDEV(FcReddit, {\n                size: 22\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this), \"Posted by \\xA0 \", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/user/${post.user}`,\n                children: [\"u/\", post.username, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 54\n              }, this), \" \\xA0 on \", moment(post.date).format('MMMM Do YYYY, h:mm a')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-body\",\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-footer\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-container\",\n                children: [/*#__PURE__*/_jsxDEV(GoComment, {\n                  size: 18\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comments\",\n                  children: \" Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(LoginModal, {\n        open: signInState.open,\n        action: signInState.signInType,\n        onClose: () => setsignInState({\n          open: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        postsPerPage: postsPerPage,\n        totalPosts: posts.length,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [currentPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n              onClick: handleRegister,\n              className: \"upvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: post.votes !== 0 ? post.votes : \"Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n              onClick: handleRegister,\n              className: \"downvote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-mainbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-author\",\n              children: [\"Posted by user: \", post.user]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-body\",\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-footer\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comments\",\n                children: \" Comments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(LoginModal, {\n        open: signInState.open,\n        action: signInState.signInType,\n        onClose: () => setsignInState({\n          open: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        postsPerPage: postsPerPage,\n        totalPosts: posts.length,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Posts, \"NDsbuMCSGxNvgGKvwOWU/2MDolI=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Posts;\n\nfunction mapStateToProps(state) {\n  return {\n    state,\n    isAuthenticated: state.auth.isAuthenticated,\n    likedPost: state.posts.likedPost\n  };\n}\n\nexport default connect(mapStateToProps)(Posts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/thomasnewton/Desktop/network_frontend/src/components/profile/content/main-bar/posts/Posts.js"],"names":["React","useState","useEffect","Fragment","useSelector","useDispatch","connect","Link","useParams","moment","Pagination","LoginModal","getUserPosts","votePost","ArrowUpwardIcon","ArrowDownwardIcon","GoComment","FcReddit","Posts","id","dispatch","posts","state","currentPage","setCurrentPage","postsPerPage","paginate","pageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","signInState","setsignInState","open","signInType","handleRegister","type","Authenticated","auth","isAuthenticated","user","vote","likedPost","map","post","votes","username","date","format","title","body","length","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch, connect } from 'react-redux'\nimport { Link, useParams } from \"react-router-dom\";\nimport moment from 'moment'\n\nimport Pagination from \"../../../../pagination/Pagination\";\nimport LoginModal from \"../../../../loginModal/LoginModal\";\n\n\nimport { getUserPosts, votePost } from '../../../../../actions/posts';\n\nimport \"./posts.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { GoComment, FcReddit } from 'react-icons/all'\n\nexport function Posts() {\n\n    //Parameters from URL (get user id)\n\n    const { id } = useParams()\n\n\n\n    // Get Posts via getPosts function and redux dispathcer\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getUserPosts(id))\n    }, [])\n\n    // Set posts in state\n    const posts = useSelector((state) => state.posts.posts)\n\n    // Handle with Pagination\n    const [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n   // Get current post (for paggination)\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n    // Handle Modal\n    // Handle State for Modal (checks if user clicked on login or logout)\n\n\tconst [signInState, setsignInState] = useState({\n\t\topen: false,\n\t\tsignInType: \"\",\n\t});\n\n\t// setSignInState to closed if the user is authenticated\n\n\tuseEffect(() => {\n\t\tsetsignInState({ open: false });\n\t}, []);\n\n\tconst handleRegister = () => {\n\t\tsetsignInState({\n\t\t\topen: true,\n\t\t\tsignInType: \"register\",\n\t\t});\n\t};\n\n    // Assign vote type (assigns string to variable based on upvote or downvote click)\n\n    var type = \"\"\n\n    // Check if user is Authenticated\n\n    const Authenticated = useSelector((state) => state.auth.isAuthenticated)\n\n    // Get logged in user id\n\n    const user = useSelector((state) => state.auth.user)\n\n    \n    // Set posts in state and then update re-render page when user votes on post. \n    const vote = useSelector((state) => state.posts.likedPost)\n\n    useEffect(() => {\n        dispatch(getUserPosts())\n    }, [vote])\n\n    if (Authenticated) {\n        return (\n            <Fragment>\n                <div>This is a specific users posts. </div>\n                    {currentPosts.map(post => (\n                        <div className=\"post-wrapper\"> \n                            <div className=\"post\">\n                                <div className=\"post-sidebar\">\n                                    <ArrowUpwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"upvote\")) } className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon onClick={() => dispatch(votePost(user.id, post.id, type=\"downvote\")) } className=\"downvote\" />\n                                </div>\n                                <div className=\"post-mainbar\">\n                                    <div className=\"post-author\">\n                                    <FcReddit size={22}/> \n                                    Posted by &nbsp; <Link to={`/user/${post.user}`}>u/{post.username} </Link> &nbsp; on {moment(post.date).format('MMMM Do YYYY, h:mm a')}\n                                    </div>\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                    <div className=\"post-footer\">\n                                        <div className=\"comment-container\">\n                                            <GoComment size={18}/> \n                                            <div className=\"comments\"> Comments</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    ))}\n                    <LoginModal\n                        open={signInState.open}\n                        action={signInState.signInType}\n                        onClose={() => setsignInState({ open: false })}\n                    ></LoginModal>\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n                </Fragment>\n        )\n    } else {\n        return (\n            <Fragment>\n                    {currentPosts.map(post => (\n                        <div className=\"post-wrapper\"> \n                            <div className=\"post\">\n                                <div className=\"post-sidebar\">\n                                    <ArrowUpwardIcon onClick={handleRegister} className=\"upvote\" />\n                                    <div>{post.votes !==0 ? post.votes : \"Vote\"}</div>\n                                    <ArrowDownwardIcon  onClick={handleRegister} className=\"downvote\" />\n                                </div>\n                                <div className=\"post-mainbar\">\n                                    <div className=\"post-author\">\n                                            Posted by user: {post.user}\n                                    </div>\n                                    <div className=\"post-title\">\n                                        {post.title}\n                                    </div>\n                                    <div className=\"post-body\">\n                                        {post.body}\n                                    </div>\n                                    <div className=\"post-footer\">\n                                        <div className=\"comments\"> Comments</div>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    ))}\n                    <LoginModal\n                        open={signInState.open}\n                        action={signInState.signInType}\n                        onClose={() => setsignInState({ open: false })}\n                    ></LoginModal>\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n                </Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tstate,\n\t\tisAuthenticated: state.auth.isAuthenticated,\n        likedPost: state.posts.likedPost\n\t};\n}\n\nexport default connect(mapStateToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}