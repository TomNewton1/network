import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';
import PropTypes from 'prop-types';
import * as React from 'react';
import { useRef, useEffect } from 'react';
import useComposedRef from 'use-composed-ref';
import invariant from 'tiny-invariant';

var castArray = function castArray(value) {
  return Array.isArray(value) ? value : [value];
};

var useOuterClick = function useOuterClick(refs, handler) {
  !(Array.isArray(refs) || typeof refs === 'object' && refs !== null) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected `refs` to be an array or object') : invariant(false) : void 0;

  if (Array.isArray(refs)) {
    !(refs.length > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected `refs` to to not be empty') : invariant(false) : void 0;
    refs.forEach(function (ref, i) {
      !(typeof ref === 'object' && ref !== null) ? process.env.NODE_ENV !== "production" ? invariant(false, "Expected `refs[" + i + "]` to be an object") : invariant(false) : void 0;
    });
  }

  !(typeof handler === 'function' || handler == null) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;
  var eventListenerRef = useRef();
  useEffect(function () {
    eventListenerRef.current = function (event) {
      if (castArray(refs).every(function (ref) {
        return !ref.current || ref.current !== event.target && !ref.current.contains(event.target);
      })) {
        handler == null ? void 0 : handler(event);
      }
    };
  }, [handler, refs]);
  useEffect(function () {
    var eventListener = function eventListener(event) {
      eventListenerRef.current(event);
    };

    ['mousedown', 'touchstart'].forEach(function (type) {
      document.addEventListener(type, eventListener, true);
    });
    return function () {
      ['mousedown', 'touchstart'].forEach(function (type) {
        document.removeEventListener(type, eventListener, true);
      });
    };
  }, []);
};

var OuterClick = /*#__PURE__*/React.forwardRef(function OuterClick(_ref, userRef) {
  var _ref$as = _ref.as,
      Element = _ref$as === void 0 ? 'div' : _ref$as,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$onOuterClick = _ref.onOuterClick,
      onOuterClick = _ref$onOuterClick === void 0 ? null : _ref$onOuterClick,
      rest = _objectWithoutPropertiesLoose(_ref, ["as", "children", "onOuterClick"]);

  var libRef = useRef();
  var ref = useComposedRef(libRef, userRef);
  useOuterClick(libRef, onOuterClick);
  return /*#__PURE__*/React.createElement(Element, _extends({}, rest, {
    ref: ref
  }), children);
});
OuterClick.propTypes = process.env.NODE_ENV !== "production" ? {
  as: PropTypes.elementType,
  children: PropTypes.node,
  onOuterClick: PropTypes.func
} : {};

export { OuterClick, useOuterClick };
//# sourceMappingURL=index.esm.js.map
